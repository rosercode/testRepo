
1. gcc 官网: http://gcc.gnu.org/
2. 使用 C 来调节系统的音量:   [[https://blog.csdn.net/u011983700/article/details/11562629][博客园]]

#+BEGIN_SRC c
  void tmep_func(int *pointer){
    *pointer = 10;
  }
  //注：函数参数中的"*"表示这是一个指针变量，函数体中的"*"表示引用这个指针，两者的含义是不同的。
#+END_SRC



1. 获取字符串的长度：
   C 中字符串有两种可存在形式；一是一个字符数组中储存字符串；二是字符指针所指向的一个常量字符串：   [[2020%E5%B9%B4 11%E6%9C%88 06%E6%97%A5 %E6%98%9F%E6%9C%9F%E4%BA%94 19:29:48 CST][TIME]]
   :前者是一个变量，储存字符串的空间是确定的，只是其中储存的内容是可变化的；后者是一个字符指针，只想一个字符串常量的内存空间:
   #+BEGIN_SRC c
     #include<stdio.h>
     #include<string.h>
     int main(void){
       char *str1 = "abcde";
       char str2[10] = "abcd";
       int length1 = strlen(str1);
       int length2 = strlen(str2);
       return 0;
     }
   #+END_SRC
   - 注意：
     1. strlen 是库 <string.h> 中的一个函数；在使用这个函数前，应引入这个库。
     2. 两种，都可以使用 strlen 这个函数；注意：不要使用 sizeof 这个关键字


2. 获取一个数组的长度: [[2020%E5%B9%B4 11%E6%9C%88 06%E6%97%A5 %E6%98%9F%E6%9C%9F%E4%BA%94 21:57:25 CST][TIME]]
   #+BEGIN_SRC c
     #include<stdio.h>
     int main(void){
       int counter[10]={0};
       int length = sizeof(counter)/sizeof(int);
       return 0;
     }
   #+END_SRC


2. 多个字符串的储存方式： [[2020%E5%B9%B4 11%E6%9C%88 06%E6%97%A5 %E6%98%9F%E6%9C%9F%E4%BA%94 20:58:05 CST][TIME]]
   - 第一种：使用二维数组
   - 第二种：使用字符指针数组
     #+BEGIN_SRC c
       #include<stdio.h>
       int main(void){
	 char *array[3]={"Hello","abc","abcd"};
	 return 0;
       }
     #+END_SRC









3. 数组指针和指针数组 [[https://blog.csdn.net/q302989778/article/details/80216899][CSDN]]
   #+BEGIN_SRC c
     int *p[5];
     int (*p)[5];
   #+END_SRC
   数组指针的意思即为通过指针引用数组，p先和*结合，说明了p是一个指针变量，指向一个大小为5的数组。所以，int (*p)[5]即为一个数组指针。int *p[5]则是一个大小为5且存放整型指针的数组。
   1. 指针数组
      1. 应用:
         1.指向一个二维数组 [fn:指针数组的使用-不规则数组]
         2.每一指针都指向一个地址(可以是数组的首地址)



1. 确定数组的长度 2020年 10月 12日 星期一 21:42:28
   #+BEGIN_SRC c
     #include <stdio.h>
     #define SIZE 3
     int main(void){
	 int array[SIZE];
	 printf("%lu\n", (sizeof(array) / sizeof(array[0])));
	 return 0;
     }
   #+END_SRC


2. 用 C 实现不规则数组 2020年 10月 12日 星期一 21:42:53
   #+BEGIN_SRC c
   
   #+END_SRC

	
   


1. 保留精度的几种方式: <2020-05-23 六 01:55>
   1. 不修改数值,只修改输出的结果 printf
   2. 直接修改数值
      前提:使用 math 库中的floor方法
      #+BEGIN_SRC c
        #include<math.h>
        float accuracy(float x,int n){
          int temp=1;
          for(int i=0;i<n;i++){
            temp*=10;
          }
          x=x*temp;
          x=floor(x)/temp;
          return x;
        }
        /*x 是要求的数字,n是要求保留的精度 */
      #+END_SRC

1. 在linux中使用 math 库中的函数(function)
   

1. 在 C 中实现一个浮点数的四舍五入   <2020-05-23 六 04:49>

[fn:指针数组的使用-不规则数组]
#+BEGIN_SRC c
  /*  Fri May 22 20:54:19 2020 注:指针数组的使用-不规则数组  */
  #include<stdio.h>
  #include<stdlib.h>
  #include<time.h>

  int main(void){
    int *p[4];
    int num[4]={0};
    srand(time(NULL));
    for(int i=0;i<(sizeof(p)/sizeof(int*));i++){
      int n=rand()%10+1;
      num[i]=n;
      p[i]=(int*)calloc(n,sizeof(int*));
      for(int j=0;j<n;j++)
        p[i][j]=rand()%100+1;
    }
    for(int i=0;i<sizeof(p)/sizeof(int*);i++){
      for(int j=0;j<num[i];j++)
        printf("%d ",p[i][j]);
      printf("\n");
    }
    return 0;
  }
#+END_SRC
 

#+BEGIN_SRC c
  #include<stdio.h>
  int main(void){
    char *p1="wangshuo";
    printf("%s\n",p1);
    return 0;
  }
#+END_SRC
一个字符指针可以指向一个字符串常量,其中存的地址就是一个字符串，用字符串来表示一个地址
因此一个字符指针数组可以存多个字符串,每个字符串就是数组的一个元素。



#+BEGIN_SRC c
  #include<stdio.h>
  #define SIZE 3
  int main(void){
    char *p[SIZE];
    for(int i=0;i<SIZE;i++)
      scanf("%s",p+i);
    for(int i=0;i<SIZE;i++)
      printf("p == %s\n",p+i);
  }
#+END_SRC



1、C语言中缓冲区的大小：用定义在头文件中的stdio中的宏BUFSIZ表示；（2019-12-26 19:49:53）
2、正是因为scanf函数遇到空格、列表符、换行符就会停止读取的特点，才决定了其特殊的用途（2019-12-26 23:00:51）
   例如进行文件和fscanf函数的配合使用。
3、结构体的声明和定义的区别：
   声明结构体时，系统没有为结构体分配空间；故在声明时不能对结构体的成员进行赋值。
   而定义结构体时，系统才为结构体分配内存空间，此时才可对结构体的成员进行赋值。（2019-12-27 00:14:58）
4、fopen函数，其形参文件指针默认指向文件的开头。（2019-12-27 00:18:40）
5、在一个ASCII文件中，存在的空格也占有内存；光标不能移动到的区域是没有任何字符的区域。（2019-12-27 00:20:30）
6、void creat2(abc *head){
   这是将指针复制一份，以一个副本的向子函数传递，作为子函数的一个形参，因此，即使副本中形参指针的指向(或者说是形参指针中存储的数据)该改变，但是，被调函数中指针中的数据并不会因为子函数中的副本指针的数据改变而改变(2019-12-27 13:28:29)
   另外，子函数向被调函数的返回值也是一个副本，子函数中一个变量或者常量的副本。
   在主调函数中，会有一个变量来接收这个副本，或者说，将被调函数向主调函数返回的副本赋值给主调函数中一个变量；
   此外，也说明，即使是在子函数中自行分配的内存在子函数结束后，它也不会被释放
   只有在整个程序结束后，自行分配的内存才会被释放（2019-12-27 13:40:50）
   在单向顺序列表程序中的creat函数中，是把一个链表建立好了以后，在将头指针复制一个副本返回到主函数中。
7、通过指针中的地址(即指针的指向)来实现对指针所指的变量的修改，使用一级指针
   需要改变指针的指向，并且保证主调函数中指针的指向也发生改变，使用二级指针
（2019-12-28 18:46:12）
8、文件。可以把空格作为结束输入的标记，但是不能作为停止读取的标记（2019-12-20 00:30:44）
9、在编写程序时，不用的内存自己要学会养成释放内存的习惯。（2019-12-25 23:48:09）
10、 数组名是一个常量地址，因此不能对数组名进行赋值。2020-01-150 01:13:45
11、 模块化的程序的另一优点：在子函数完成任务后，其局部静态变量的内存会自动释放，减少了
程序所使用的内存 。- Wed Jan 15 14:19:13 2020
12.C语言中的sizeof运算符是为了应对在不同平台上相同数据类型的内存大小不同而出现的.Wed Mar 18 17:42:34 2020

13.C语言中fgets函数.              _Sat Mar 28 21:17:38 2020_    原文链接：[[https://blog.csdn.net/constantin_/article/details/79665446][CSDN]]
    fgets()函数用于从文件流中读取一行或指定个数的字符，其原型为：
       char * fgets(char * string, int size, FILE * stream);
       参数说明：
       string为一个字符数组，用来保存读取到的字符。
       size为要读取的字符的个数。如果该行字符数大于size-1，则读到 size-1 个字符时结束，并在最后补充' \0'；如果该行字符数小于等于 size-1，则读取所有字符，并在最后补充 '\0'。即，每次最多读取 size-1 个字符。
       stream为文件流指针。
       【返回值】读取成功，返回读取到的字符串，即string；失败或读到文件结尾返回NULL。因此我们不能直接通过fgets()的返回值来判断函数是否是出错而终止的，应该借助feof()函数或者ferror()函数来判断。
       注意：fgets()与gets()不一样，不仅仅是因为gets()函数只有一个参数 FILE *stream，更重要的是，fgets()可以指定最大读取的字符串的个数，杜绝了gets()使用不当造成缓存溢出的问题 
